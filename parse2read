package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"strings"
	"sync"
	"time"
)

type Person struct {
	SeqDimPessoaGeral string `json:"seq_dim_pessoa_geral"`
	NumDoc            string `json:"num_doc"`
	NumPessoa         string `json:"nom_pessoa"`
	DscOrigem         string `json:"dsc_origem"`
	IndTipoPessoa     string `json:"ind_tipo_pessoa"`
	DatInsercao       string `json:"dat_insercao"`
	SglEstado         string `json:"sgl_estado"`
	IndValido         string `json:"ind_valido"`
}

func InfoFile(fileInfo os.FileInfo) {

	fmt.Println("File name:", fileInfo.Name())
	fmt.Println("Size in bytes:", fileInfo.Size())
	fmt.Println("Permissions:", fileInfo.Mode())
	fmt.Println("Last modified:", fileInfo.ModTime())
	fmt.Println("Is Directory: ", fileInfo.IsDir())
	fmt.Printf("System interface type: %T\n", fileInfo.Sys())
	fmt.Printf("System info: %+v\n\n", fileInfo.Sys())

}

func SplitFile(filename string) {
	fileInfo, err := os.Stat(filename)
	if err != nil {
		if os.IsNotExist(err) {
			log.Fatal("file does not exist")
		}
	}
	log.Println("file does exist")
	log.Println(fileInfo)
}

func CreateFile(filename string) {

	var (
		newFile *os.File
		err     error
	)

	newFile, err = os.Create(filename)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(newFile)
	newFile.Close()

}

func MoveOrRename(originalPath string, newPath string) {
	err := os.Rename(originalPath, newPath)
	if err != nil {
		log.Fatal(err)
	}
}

func CheckPermissions(filename string) {

	// test write permissions, it is possible the file
	// does not exist and that will return a different
	// error that can be checked with os.IsNotExist(err)

	file, err := os.OpenFile(filename, os.O_WRONLY, 0666)
	if err != nil {
		if os.IsPermission(err) {
			log.Println("error: write permission denied.")
		}
	}
	file.Close()

	// test read permission

}

func main() {

	sliceOfString := os.Args[1:]
	filename := strings.Join(sliceOfString, "")
	fmt.Println(filename)

	file, err := os.Open(filename)
	if err != nil {
		fmt.Println("cannot able to read the file", err)
		return
	}
	// close after checking error
	defer file.Close() // do not forget to close the file

	linesPool := sync.Pool{New: func() interface{} {
		lines := make([]byte, 500*1024)
		return lines
	}}
	stringPool := sync.Pool{New: func() interface{} {
		lines := ""
		return lines
	}}
	slicePool := sync.Pool{New: func() interface{} {
		lines := make([]string, 100)
		return lines
	}}

	// we cannot read the entire file
	// so what we must to do is load a chunk

	reader := bufio.NewReader(file)

	var wg sync.WaitGroup // wait group to keep track of all threads

	for {
		buf := linesPool.Get().([]byte)
		n, err := reader.Read(buf)
		buf = buf[:n]

		if n == 0 {
			if err != nil {
				fmt.Println(err)
				break
			}
			if err == io.EOF {
				break
			}
			log.Fatal(err)

		}

		nextUntilNewline, err := r.ReadBytes('\n') // read entire line

		if err != io.EOF {
			buf = append(buf, nextUntilNewline...)
		}

		wg.Add(1)
		go func() {
			// process each chunk concurrently
			// start -> log start time,end -> log end time

			ProcessChunk(buf, &linesPool, &stringPool, &slicePool, start, end)

			wg.Done()
		}()

	}
	wg.Wait()

}

func ProcessChunk(chunk []byte, linesPool *sync.Pool, stringPool *sync.Pool,
	slicePool *sync.Pool, start time.Time, end time.Time) {

	// another wait group to process every chunk further
	var wg2 sync.WaitGroup

	logs := stringPool.Get().(string)

	logs = string(chunk)

	linesPool.Put(chunk) // put back the chunk in pool

	// split the string by "\n", so that we have slice of logs
	logsSlice := strings.Split(logs, "\n\n")

	stringPool.Put(logs) // put back the string pool

	chunkSize := 100 // process the bunch of 100 logs in thread

	n := len(logsSlice)

	noOfThread := n / chunkSize

	if n%chunkSize != 0 {
		// check for overflow
		noOfThread++
	}

	lenght := len(logsSlice)

	// transverse the chunk
	for i := 0; i < lenght; i += chunkSize {
		wg2.Add(1)
		// process each chunk in saperate chunk
		go func(s int, e int) {
			for i := s; i < e; i++ {
				text := logsSlice[i]

				if len(text) == 0 {
					continue
				}

				logParts := string.SplitN(text, ",", 2)
				logCreationTimeString := logParts[0]
				logCreationTime, err := time.Parse("2006-01-02t15:04:05.0000Z", logCreationTimeString)
				if err != nil {
					fmt.Printf("\n could not able to parse the time : %s for log : %v ", logCreationTimeString, text)
					return
				}

				// check if log's timestamp is inbetween our
				// desired period
				if logCreationTime.After(start) && logCreationTime.Before(end) {
					fmt.Println(text)
				}
			}

			textSlice = nil
			wg2.Done()
		}(i*chunkSize, int(math.Min(float64((i+1)*chunkSize), float64(len(logsSlice)))))

		// passing the indexes for processing

	}
	wg2.Wait() // wait for a chunk to finish
	logSlice = nil

}

func WriteFile(filename string, content []byte) {

	// open a new file for writing only
	file, err := os.OpenFile(filename, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0666)
	if err != nil {
		log.Fatal(err)
	}

	defer file.Close() // do not forget to close the file

	// write bytes to file
	bytesWritten, err := file.Write(content)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("wrote %d bytes.\n", bytesWritten)
}
